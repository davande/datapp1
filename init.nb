{"nbformat_minor":0,"cells":[{"cell_type":"markdown","source":"# US Mortality Analysis","outputs":null,"metadata":{}},{"execution_count":8,"cell_type":"code","source":"population_raw  = register(\"s3a://ps-samples/rms/life-risk/population-2000-2010.csv\",\"population_raw\",True,True)\nparams_raw      = register(\"s3a://ps-samples/rms/life-risk/variables.csv\",\"params_raw\",True,True)\nstates_abbr_raw = register(\"s3a://ps-samples/rms/life-risk/us-states-abbr.csv\",\"states_abbr_raw\",True, True)","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"%%sql\nselect distinct STNAME\nfrom population_raw\nlimit 200","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"%%sql \nselect *\nfrom states_abbr_raw","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"%%sql\nselect *\nfrom death\norder by AgeGrp desc\nlimit 20 ","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"markdown","source":"## Death data is not a csv file and has an special format but we can read and extract the hidden schema","outputs":null,"metadata":{}},{"execution_count":55,"cell_type":"code","source":"textData(\"s3a://ps-samples/rms/life-risk/death-data/Mort04us.dat\") \\\n.map(lambda w: Row(StateAbr   = w[28:30], \n                   CountyCode = w[34:37],\n                   Sex        = w[68:69],\n                   AgeGrp     = w[76:78])).toDF().registerTempTable(\"death_raw\")","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":75,"cell_type":"code","source":"sql(\"\"\"\nSELECT *, COUNT(*) AS DeathCount\nFROM (SELECT StateAbr, CountyCode, Sex, (CASE \n                                            WHEN AgeGrp \u003c 7 THEN 1\n                                            WHEN AgeGrp \u003e= 7 AND AgeGrp \u003c 23 THEN AgeGrp - 5\n                                            WHEN AgeGrp \u003e= 23 THEN 18\n                                        END) as AgeGrp\n      FROM death_raw) as temp\nGROUP BY StateAbr, CountyCode, AgeGrp, Sex\n\"\"\").registerTempTable(\"death\")","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":49,"cell_type":"code","source":"sql(\"\"\"\nSELECT StateCode as StateAbr, CTYNAME as CountyName, COUNTY as CountyCode, \n       AGEGRP as AgeGrp,     POPESTIMATE2004 as Population,\n       (CASE \n           WHEN Sex == 1 THEN 'M' \n           WHEN Sex == 2 THEN 'F' \n           WHEN Sex == 0 THEN 'T' \n           ELSE 'ERROR' \n           END) as Sex\nFROM population_raw\nJOIN states_abbr_raw ON (population_raw.STNAME = states_abbr_raw.StateName) \n\"\"\").registerTempTable(\"population\")","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":120,"cell_type":"code","source":"sql(\"\"\"\nSELECT death.StateAbr, StateName, CountyName, death.Sex, death.AgeGrp, DeathCount, \n                       Population, CONCAT(CountyName, \", \" , StateName) \nFROM death\nJOIN population ON (death.StateAbr = population.StateAbr AND \n                    death.CountyCode = population.CountyCode AND \n                    death.Sex = population.Sex AND\n                    death.AgeGrp = population.AgeGrp)\nJOIN states_abbr_raw ON (death.StateAbr = states_abbr_raw.StateCode)\n\"\"\").registerTempTable(\"deathpop\")","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":121,"cell_type":"code","source":"%%sql\nselect *\nfrom deathpop\nlimit 10","outputs":[{"data":{"text/html":"\u003cdiv\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eStateAbr\u003c/th\u003e\n      \u003cth\u003eStateName\u003c/th\u003e\n      \u003cth\u003eCountyName\u003c/th\u003e\n      \u003cth\u003eSex\u003c/th\u003e\n      \u003cth\u003eAgeGrp\u003c/th\u003e\n      \u003cth\u003eDeathCount\u003c/th\u003e\n      \u003cth\u003ePopulation\u003c/th\u003e\n      \u003cth\u003e_c7\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003eAL\u003c/td\u003e\n      \u003ctd\u003eAlabama\u003c/td\u003e\n      \u003ctd\u003eCalhoun County\u003c/td\u003e\n      \u003ctd\u003eM\u003c/td\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e3909\u003c/td\u003e\n      \u003ctd\u003eCalhoun County, Alabama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003eAL\u003c/td\u003e\n      \u003ctd\u003eAlabama\u003c/td\u003e\n      \u003ctd\u003eMorgan County\u003c/td\u003e\n      \u003ctd\u003eM\u003c/td\u003e\n      \u003ctd\u003e15\u003c/td\u003e\n      \u003ctd\u003e56\u003c/td\u003e\n      \u003ctd\u003e1600\u003c/td\u003e\n      \u003ctd\u003eMorgan County, Alabama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003eAL\u003c/td\u003e\n      \u003ctd\u003eAlabama\u003c/td\u003e\n      \u003ctd\u003eShelby County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e5736\u003c/td\u003e\n      \u003ctd\u003eShelby County, Alabama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003eAL\u003c/td\u003e\n      \u003ctd\u003eAlabama\u003c/td\u003e\n      \u003ctd\u003eShelby County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e18\u003c/td\u003e\n      \u003ctd\u003e163\u003c/td\u003e\n      \u003ctd\u003e871\u003c/td\u003e\n      \u003ctd\u003eShelby County, Alabama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003eAL\u003c/td\u003e\n      \u003ctd\u003eAlabama\u003c/td\u003e\n      \u003ctd\u003eTuscaloosa County\u003c/td\u003e\n      \u003ctd\u003eM\u003c/td\u003e\n      \u003ctd\u003e12\u003c/td\u003e\n      \u003ctd\u003e49\u003c/td\u003e\n      \u003ctd\u003e4278\u003c/td\u003e\n      \u003ctd\u003eTuscaloosa County, Alabama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003ctd\u003eCA\u003c/td\u003e\n      \u003ctd\u003eCalifornia\u003c/td\u003e\n      \u003ctd\u003eFresno County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e11\u003c/td\u003e\n      \u003ctd\u003e83\u003c/td\u003e\n      \u003ctd\u003e24731\u003c/td\u003e\n      \u003ctd\u003eFresno County, California\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e6\u003c/th\u003e\n      \u003ctd\u003eCA\u003c/td\u003e\n      \u003ctd\u003eCalifornia\u003c/td\u003e\n      \u003ctd\u003eSanta Clara County\u003c/td\u003e\n      \u003ctd\u003eM\u003c/td\u003e\n      \u003ctd\u003e13\u003c/td\u003e\n      \u003ctd\u003e292\u003c/td\u003e\n      \u003ctd\u003e30877\u003c/td\u003e\n      \u003ctd\u003eSanta Clara County, California\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003eCA\u003c/td\u003e\n      \u003ctd\u003eCalifornia\u003c/td\u003e\n      \u003ctd\u003eStanislaus County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e15\u003c/td\u003e\n      \u003ctd\u003e164\u003c/td\u003e\n      \u003ctd\u003e6374\u003c/td\u003e\n      \u003ctd\u003eStanislaus County, California\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003eCO\u003c/td\u003e\n      \u003ctd\u003eColorado\u003c/td\u003e\n      \u003ctd\u003eBoulder County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e12\u003c/td\u003e\n      \u003ctd\u003e33\u003c/td\u003e\n      \u003ctd\u003e7624\u003c/td\u003e\n      \u003ctd\u003eBoulder County, Colorado\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003eCO\u003c/td\u003e\n      \u003ctd\u003eColorado\u003c/td\u003e\n      \u003ctd\u003eDouglas County\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003e10413\u003c/td\u003e\n      \u003ctd\u003eDouglas County, Colorado\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e","text/plain":"  StateAbr   StateName          CountyName Sex  AgeGrp  DeathCount Population  \\\n0  AL       Alabama     Calhoun County      M   3       2           3909        \n1  AL       Alabama     Morgan County       M   15      56          1600        \n2  AL       Alabama     Shelby County       F   2       1           5736        \n3  AL       Alabama     Shelby County       F   18      163         871         \n4  AL       Alabama     Tuscaloosa County   M   12      49          4278        \n5  CA       California  Fresno County       F   11      83          24731       \n6  CA       California  Santa Clara County  M   13      292         30877       \n7  CA       California  Stanislaus County   F   15      164         6374        \n8  CO       Colorado    Boulder County      F   12      33          7624        \n9  CO       Colorado    Douglas County      F   1       5           10413       \n\n                              _c7  \n0  Calhoun County, Alabama         \n1  Morgan County, Alabama          \n2  Shelby County, Alabama          \n3  Shelby County, Alabama          \n4  Tuscaloosa County, Alabama      \n5  Fresno County, California       \n6  Santa Clara County, California  \n7  Stanislaus County, California   \n8  Boulder County, Colorado        \n9  Douglas County, Colorado        "},"execution_count":121,"metadata":{},"output_type":"execute_result"}],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"markdown","source":"UNEMPLOYMENT RATE\ncivilian unemployment rate = unemployed/totalPopulation = HC03_VC07\n\n\nINCOME\nmedian household income = HC01_VC85\n\nmean household income = HC01_VC86\n\nmedian family income = HC01_VC114\n\nmean family income = HC01_VC115\n\nper capita income = HC01_VC118\n\nmedian earning for male full-time, year-round workers = HC01_VC125\nmedian earning for female full-time, year-round workers = HC01_VC126\n\n\nHEALTH INSURANCE\ncivilian with health insurance coverage percentage = HC03_VC131\n\n\nPOVERTY LEVEL\npercent below poverty level - all families = HC03_VC161\n\npercent below poverty level - 65 years and over = HC03_VC178","outputs":null,"metadata":{}},{"execution_count":161,"cell_type":"code","source":"mortalitydetails = sql(\"\"\"\nSELECT Mortality, HC03_VC07  as UnemploymentRate,\n                  HC01_VC85  as HouseholdIncome,\n                  HC03_VC131 as CoveragePercentage,\n                  HC03_VC161 as PovertyLevel\nFROM (SELECT StateAbr, StateName, CountyName, CONCAT(CountyName, \", \", StateName) as FullCountyName,\n                             SUM(DeathCount) as DeathSum, \n                             SUM(Population) as PopulationSum, \n                             SUM(DeathCount) / SUM(Population) as Mortality\nFROM deathpop\nWHERE AgeGrp \u003e= 14 AND AgeGrp \u003c= 17\nGROUP BY StateAbr, StateName, CountyName) as mortality\nJOIN params_raw ON ( mortality.FullCountyName == params_raw.`GEO.display-label`)\n\"\"\").toPandas()","outputs":[{"name":"stderr","output_type":"stream","text":"ERROR: An unexpected error occurred while tokenizing input\nThe following traceback may be corrupted or invalid\nThe error message is: ('EOF in multi-line string', (1, 0))\n\n"},{"ename":"Py4JJavaError","evalue":"An error occurred while calling o453.javaToPython.\n: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenExchange hashpartitioning(FullCountyName#68848)\n TungstenProject [Mortality#68851,FullCountyName#68848]\n  TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Final,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Final,isDistinct=false)], output=[FullCountyName#68848,Mortality#68851])\n   TungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n    TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n     TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n      BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n       TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n        SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n         TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n          TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n           Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n            TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n             TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n              TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n               TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n                Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n         TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n          TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n           TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n            BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n             ConvertToUnsafe\n              InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n             ConvertToUnsafe\n              InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n       ConvertToUnsafe\n        InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:141)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenSort.doExecute(sort.scala:169)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.joins.SortMergeJoin.doExecute(SortMergeJoin.scala:80)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.toRdd$lzycompute(SQLContext.scala:933)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.toRdd(SQLContext.scala:933)\n\tat org.apache.spark.sql.DataFrame.javaToPython(DataFrame.scala:1582)\n\tat sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:231)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:379)\n\tat py4j.Gateway.invoke(Gateway.java:259)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:133)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:207)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Final,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Final,isDistinct=false)], output=[FullCountyName#68848,Mortality#68851])\n TungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n  TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n   TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n    BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n     TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n      SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n       TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n        TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n         Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n          TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n           TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n            TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n             TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n              Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n       TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n        TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n         TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n          BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n           ConvertToUnsafe\n            InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n           ConvertToUnsafe\n            InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n     ConvertToUnsafe\n      InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:142)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:141)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 33 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n  TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n   BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n    TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n     SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n      TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n       TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n        Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n         TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n          TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n           TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n            TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n             Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n      TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n       TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n        TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n         BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n          ConvertToUnsafe\n           InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n          ConvertToUnsafe\n           InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n    ConvertToUnsafe\n     InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:141)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:119)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 46 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n  BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n   TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n    SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n     TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n      TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n       Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n        TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n         TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n          TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n           TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n            Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n     TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n      TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n       TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n        BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n         ConvertToUnsafe\n          InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n         ConvertToUnsafe\n          InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n   ConvertToUnsafe\n    InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:142)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:141)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 54 more\nCaused by: java.util.concurrent.TimeoutException: Futures timed out after [300 seconds]\n\tat scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:219)\n\tat scala.concurrent.impl.Promise$DefaultPromise.result(Promise.scala:223)\n\tat scala.concurrent.Await$$anonfun$result$1.apply(package.scala:107)\n\tat scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:53)\n\tat scala.concurrent.Await$.result(package.scala:107)\n\tat org.apache.spark.sql.execution.joins.BroadcastHashJoin.doExecute(BroadcastHashJoin.scala:110)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:119)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 62 more\n","output_type":"error","traceback":["\u001b[1;31m---------------------------------------------------------------------------\u001b[0m","\u001b[1;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)","\u001b[1;32m\u003cipython-input-161-04e3d012d8b7\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[1;34m()\u001b[0m\n\u001b[0;32m     12\u001b[0m GROUP BY StateAbr, StateName, CountyName) as mortality\n\u001b[0;32m     13\u001b[0m \u001b[0mJOIN\u001b[0m \u001b[0mparams_raw\u001b[0m \u001b[0mON\u001b[0m \u001b[1;33m(\u001b[0m \u001b[0mmortality\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mFullCountyName\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mparams_raw\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m`\u001b[0m\u001b[0mGEO\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[1;33m-\u001b[0m\u001b[0mlabel\u001b[0m\u001b[1;33m`\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---\u003e 14\u001b[1;33m \"\"\").toPandas()\n\u001b[0m","\u001b[1;32m/usr/share/spark/python/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mtoPandas\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1272\u001b[0m         \"\"\"\n\u001b[0;32m   1273\u001b[0m         \u001b[1;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-\u003e 1274\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfrom_records\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1275\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1276\u001b[0m     \u001b[1;31m##########################################################################################\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m/usr/share/spark/python/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mcollect\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    277\u001b[0m         \"\"\"\n\u001b[0;32m    278\u001b[0m         \u001b[1;32mwith\u001b[0m \u001b[0mSCCallSiteSync\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mcss\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--\u003e 279\u001b[1;33m             \u001b[0mport\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jvm\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mPythonRDD\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcollectAndServe\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjavaToPython\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrdd\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    280\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_load_from_socket\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mport\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mBatchedSerializer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    281\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m/usr/share/spark/python/lib/py4j-0.8.2.1-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[1;34m(self, *args)\u001b[0m\n\u001b[0;32m    536\u001b[0m         \u001b[0manswer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    537\u001b[0m         return_value = get_return_value(answer, self.gateway_client,\n\u001b[1;32m--\u003e 538\u001b[1;33m                 self.target_id, self.name)\n\u001b[0m\u001b[0;32m    539\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    540\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m/usr/share/spark/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[1;34m(*a, **kw)\u001b[0m\n\u001b[0;32m     34\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     35\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---\u003e 36\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     37\u001b[0m         \u001b[1;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     38\u001b[0m             \u001b[0ms\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0me\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n","\u001b[1;32m/usr/share/spark/python/lib/py4j-0.8.2.1-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[1;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[0;32m    298\u001b[0m                 raise Py4JJavaError(\n\u001b[0;32m    299\u001b[0m                     \u001b[1;34m'An error occurred while calling {0}{1}{2}.\\n'\u001b[0m\u001b[1;33m.\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--\u003e 300\u001b[1;33m                     format(target_id, '.', name), value)\n\u001b[0m\u001b[0;32m    301\u001b[0m             \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    302\u001b[0m                 raise Py4JError(\n","\u001b[1;31mPy4JJavaError\u001b[0m: An error occurred while calling o453.javaToPython.\n: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenExchange hashpartitioning(FullCountyName#68848)\n TungstenProject [Mortality#68851,FullCountyName#68848]\n  TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Final,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Final,isDistinct=false)], output=[FullCountyName#68848,Mortality#68851])\n   TungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n    TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n     TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n      BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n       TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n        SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n         TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n          TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n           Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n            TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n             TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n              TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n               TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n                Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n         TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n          TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n           TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n            BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n             ConvertToUnsafe\n              InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n             ConvertToUnsafe\n              InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n       ConvertToUnsafe\n        InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:141)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenSort.doExecute(sort.scala:169)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.joins.SortMergeJoin.doExecute(SortMergeJoin.scala:80)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.toRdd$lzycompute(SQLContext.scala:933)\n\tat org.apache.spark.sql.SQLContext$QueryExecution.toRdd(SQLContext.scala:933)\n\tat org.apache.spark.sql.DataFrame.javaToPython(DataFrame.scala:1582)\n\tat sun.reflect.GeneratedMethodAccessor44.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:231)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:379)\n\tat py4j.Gateway.invoke(Gateway.java:259)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:133)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:207)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Final,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Final,isDistinct=false)], output=[FullCountyName#68848,Mortality#68851])\n TungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n  TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n   TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n    BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n     TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n      SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n       TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n        TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n         Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n          TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n           TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n            TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n             TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n              Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n       TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n        TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n         TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n          BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n           ConvertToUnsafe\n            InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n           ConvertToUnsafe\n            InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n     ConvertToUnsafe\n      InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:142)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:141)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 33 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenExchange hashpartitioning(StateAbr#4998,StateName#3427,CountyName#4744)\n TungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n  TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n   BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n    TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n     SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n      TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n       TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n        Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n         TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n          TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n           TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n            TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n             Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n      TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n       TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n        TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n         BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n          ConvertToUnsafe\n           InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n          ConvertToUnsafe\n           InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n    ConvertToUnsafe\n     InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:141)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:119)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 46 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[StateAbr#4998,StateName#3427,CountyName#4744], functions=[(sum(DeathCount#5045L),mode=Partial,isDistinct=false),(sum(cast(Population#4747 as double)),mode=Partial,isDistinct=false)], output=[StateAbr#4998,StateName#3427,CountyName#4744,currentSum#71754L,currentSum#71756])\n TungstenProject [StateName#3427,CountyName#4744,Population#4747,DeathCount#5045L,StateAbr#4998]\n  BroadcastHashJoin [StateAbr#4998], [StateCode#3426], BuildRight\n   TungstenProject [CountyName#4744,DeathCount#5045L,Population#4747,StateAbr#4998]\n    SortMergeJoin [StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044], [StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double)]\n     TungstenSort [StateAbr#4998 ASC,CountyCode#4996 ASC,Sex#4997 ASC,AgeGrp#5044 ASC], false, 0\n      TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044)\n       Filter ((AgeGrp#5044 \u003e= 14.0) \u0026\u0026 (AgeGrp#5044 \u003c= 17.0))\n        TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Final,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,Sex#4997,AgeGrp#5044,DeathCount#5045L])\n         TungstenExchange hashpartitioning(StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997)\n          TungstenAggregate(key=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997], functions=[(count(1),mode=Partial,isDistinct=false)], output=[StateAbr#4998,CountyCode#4996,AgeGrp#5044,Sex#4997,currentCount#71761L])\n           TungstenProject [StateAbr#4998,CountyCode#4996,Sex#4997,CASE WHEN (cast(AgeGrp#4995 as double) \u003c 7.0) THEN 1.0 WHEN ((cast(AgeGrp#4995 as double) \u003e= 7.0) \u0026\u0026 (cast(AgeGrp#4995 as double) \u003c 23.0)) THEN (cast(AgeGrp#4995 as double) - 5.0) WHEN (cast(AgeGrp#4995 as double) \u003e= 23.0) THEN 18.0 AS AgeGrp#5044]\n            Scan PhysicalRDD[AgeGrp#4995,CountyCode#4996,Sex#4997,StateAbr#4998]\n     TungstenSort [StateAbr#4743 ASC,CountyCode#4745 ASC,Sex#4748 ASC,cast(AgeGrp#4746 as double) ASC], false, 0\n      TungstenExchange hashpartitioning(StateAbr#4743,CountyCode#4745,Sex#4748,cast(AgeGrp#4746 as double))\n       TungstenProject [StateCode#3426 AS StateAbr#4743,CTYNAME#4 AS CountyName#4744,COUNTY#2 AS CountyCode#4745,AGEGRP#6 AS AgeGrp#4746,POPESTIMATE2004#12 AS Population#4747,CASE WHEN (cast(Sex#5 as double) = 1.0) THEN M WHEN (cast(Sex#5 as double) = 2.0) THEN F WHEN (cast(Sex#5 as double) = 0.0) THEN T ELSE ERROR AS Sex#4748]\n        BroadcastHashJoin [STNAME#3], [StateName#3427], BuildRight\n         ConvertToUnsafe\n          InMemoryColumnarTableScan [POPESTIMATE2004#12,STNAME#3,CTYNAME#4,COUNTY#2,AGEGRP#6,Sex#5], (InMemoryRelation [SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/population-2000-2010.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[SUMLEV#0,STATE#1,COUNTY#2,STNAME#3,CTYNAME#4,SEX#5,AGEGRP#6,ESTIMATESBASE2000#7,POPESTIMATE2000#8,POPESTIMATE2001#9,POPESTIMATE2002#10,POPESTIMATE2003#11,POPESTIMATE2004#12,POPESTIMATE2005#13,POPESTIMATE2006#14,POPESTIMATE2007#15,POPESTIMATE2008#16,POPESTIMATE2009#17,CENSUS2010POP#18,POPESTIMATE2010#19]), None)\n         ConvertToUnsafe\n          InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n   ConvertToUnsafe\n    InMemoryColumnarTableScan [StateCode#3426,StateName#3427], (InMemoryRelation [StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429], true, 10000, StorageLevel(true, true, false, true, 1), (Scan CsvRelation(s3a://ps-samples/rms/life-risk/us-states-abbr.csv,true,,,\",null,#,PERMISSIVE,COMMONS,false,false,null,UTF-8,false)[StateCode#3426,StateName#3427,IsRealState#3428,StateDate#3429]), None)\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:142)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:141)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 54 more\nCaused by: java.util.concurrent.TimeoutException: Futures timed out after [300 seconds]\n\tat scala.concurrent.impl.Promise$DefaultPromise.ready(Promise.scala:219)\n\tat scala.concurrent.impl.Promise$DefaultPromise.result(Promise.scala:223)\n\tat scala.concurrent.Await$$anonfun$result$1.apply(package.scala:107)\n\tat scala.concurrent.BlockContext$DefaultBlockContext$.blockOn(BlockContext.scala:53)\n\tat scala.concurrent.Await$.result(package.scala:107)\n\tat org.apache.spark.sql.execution.joins.BroadcastHashJoin.doExecute(BroadcastHashJoin.scala:110)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.TungstenProject.doExecute(basicOperators.scala:86)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:140)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:138)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:147)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:138)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:119)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:69)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 62 more\n"]}],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"mortalitydetails['Mortality'].corr(mortalitydetails['UnemploymentRate'])","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"execution_count":157,"cell_type":"code","source":"mortalitydetails.toPandas().corr()","outputs":[{"data":{"text/html":"\u003cdiv\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eDeathSum\u003c/th\u003e\n      \u003cth\u003ePopulationSum\u003c/th\u003e\n      \u003cth\u003eMortality\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003eDeathSum\u003c/th\u003e\n      \u003ctd\u003e1.000000\u003c/td\u003e\n      \u003ctd\u003e0.989974\u003c/td\u003e\n      \u003ctd\u003e-0.074221\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003ePopulationSum\u003c/th\u003e\n      \u003ctd\u003e0.989974\u003c/td\u003e\n      \u003ctd\u003e1.000000\u003c/td\u003e\n      \u003ctd\u003e-0.163020\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003eMortality\u003c/th\u003e\n      \u003ctd\u003e-0.074221\u003c/td\u003e\n      \u003ctd\u003e-0.163020\u003c/td\u003e\n      \u003ctd\u003e1.000000\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e","text/plain":"               DeathSum  PopulationSum  Mortality\nDeathSum       1.000000  0.989974      -0.074221 \nPopulationSum  0.989974  1.000000      -0.163020 \nMortality     -0.074221 -0.163020       1.000000 "},"execution_count":157,"metadata":{},"output_type":"execute_result"}],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"execution_count":162,"cell_type":"code","source":"6*6","outputs":[{"data":{"text/plain":"36"},"execution_count":162,"metadata":{},"output_type":"execute_result"}],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"execution_count":148,"cell_type":"code","source":"registerFunction(\"afinder\", lambda x,y: float(x)*float(y), DoubleType())","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":149,"cell_type":"code","source":"%%sql select HC01_VC85, afinder(HC01_VC85,HC01_VC85) as power from params_raw\nlimit 10","outputs":[{"data":{"text/html":"\u003cdiv\u003e\n\u003ctable border=\"1\" class=\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style=\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eHC01_VC85\u003c/th\u003e\n      \u003cth\u003epower\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e53682\u003c/td\u003e\n      \u003ctd\u003e2881757124\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e50221\u003c/td\u003e\n      \u003ctd\u003e2522148841\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e32911\u003c/td\u003e\n      \u003ctd\u003e1083133921\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e36447\u003c/td\u003e\n      \u003ctd\u003e1328383809\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e44145\u003c/td\u003e\n      \u003ctd\u003e1948781025\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003ctd\u003e32033\u003c/td\u003e\n      \u003ctd\u003e1026113089\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e6\u003c/th\u003e\n      \u003ctd\u003e29918\u003c/td\u003e\n      \u003ctd\u003e895086724\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003ctd\u003e39962\u003c/td\u003e\n      \u003ctd\u003e1596961444\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003ctd\u003e32402\u003c/td\u003e\n      \u003ctd\u003e1049889604\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e9\u003c/th\u003e\n      \u003ctd\u003e34907\u003c/td\u003e\n      \u003ctd\u003e1218498649\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e","text/plain":"  HC01_VC85       power\n0  53682     2881757124\n1  50221     2522148841\n2  32911     1083133921\n3  36447     1328383809\n4  44145     1948781025\n5  32033     1026113089\n6  29918     895086724 \n7  39962     1596961444\n8  32402     1049889604\n9  34907     1218498649"},"execution_count":149,"metadata":{},"output_type":"execute_result"}],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":146,"cell_type":"code","source":"print 53682 * 53682","outputs":[{"name":"stdout","output_type":"stream","text":"2881757124\n"}],"metadata":{"collapsed":false,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"markdown","source":"Future filter for death will be sex=M and age 70 to 74 will be AGEGRP=40","outputs":null,"metadata":{}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"execution_count":12,"cell_type":"code","source":"def textData(path):\n    return sc.textFile(path)\n\ndef csvData(path):\n    return sqlContext.read.format('com.databricks.spark.csv').options(header=header).load(path)\n\ndef jsonData(path):\n    return sqlContext.read.format('json')","outputs":[],"metadata":{"collapsed":false,"trusted":true}},{"execution_count":7,"cell_type":"code","source":"def link(path, header=False):\n    if path == \"\":\n         print \"error: you must define a path\"\n    else:       \n        if path.endswith('.csv'):\n            return sqlContext.read.format('com.databricks.spark.csv').options(header=header).load(path)\n\n        if path.endswith('.json'):\n            return sqlContext.read.json(path)\n                           \n        if path.endswith('.parquet'):\n            return sqlContext.read.load(path)\n        \n        #if path.startswith('jdbc:'): \n        #    return sqlContext.read.jdbc(path)\n        \n        if '//docs.google.com/spreadsheet/' in path:\n            if not \"\u0026output=csv\" in path:\n               path = path + '\u0026output=csv'\n            \n            from StringIO import StringIO  \n            import requests\n\n            r = requests.get(path)\n            data = r.content\n            pdf = pd.read_csv(StringIO(data), index_col=0,parse_dates=['Quradate'])\n            return sqlContext.createDataFrame(pdf)\n\n        print \"unknown file format\"\n        return \n\n\ndef register(path, tableName=None, cache=False, header=False):\n  \n    df = link(path,header)\n    \n    if df is None:\n      return None\n  \n    if tableName is not None and tableName != \"\":\n      df.registerTempTable(tableName)\n  \n    if cache:\n      df.cache()\n  \n    return df\n  ","outputs":[],"metadata":{"collapsed":true,"trusted":true}},{"cell_type":"code","source":"registerFunction(\"concat\", )","outputs":[],"metadata":{"collapsed":true,"trusted":true}}],"nbformat":4,"metadata":{"kernelspec":{"display_name":"Python 2","name":"python2","language":"python"},"language_info":{"mimetype":"text/x-python","nbconvert_exporter":"python","version":"2.7.10","name":"python","file_extension":".py","pygments_lexer":"ipython2","codemirror_mode":{"version":2,"name":"ipython"}}}}
